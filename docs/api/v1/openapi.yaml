openapi: 3.1.0
info:
  title: Huella Rural API
  description: Huella Rural API
  version: 0.0.1
  contact:
    name: Huella Rural
    email: icesarani@uade.edu.ar
servers:
  - url: http://localhost:3000
security:
  - cookieAuth: []
  - bearerAuth: []
tags:
  - name: Auth
    description: Endpoints for user authentication.
  - name: Certification Requests
    description: Endpoints for managing certification requests.
  - name: Users
    description: Endpoints for managing users.
  - name: Localities
    description: Endpoints for managing localities.
paths:
  /api/v1/sessions:
    post:
      summary: Creates a new session.
      description: Creates a new session for the user.
      operationId: createSession
      tags: [Auth]
      requestBody:
        description: Viewer credentials for authentication.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      description: The user's email address.
                      example: jdoe@gmail.com
                    password:
                      type: string
                      format: password
                      description: The user's password.
                      example: securePassword123
                  required:
                    - email
                    - password
              required:
                - user
      responses:
        '200':
          description: Successfully authenticated. The session token is sent as a cookie and JWT token in Authorization header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes the current session.
      description: Deletes the current session for the user.
      operationId: deleteSession
      tags: [Auth]
      responses:
        '204':
          description: Successfully deleted the session.
        "401":
          description: Invalid session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/registrations:
    post:
      summary: Creates a new user registration.
      description: Creates a new user account and returns the user information.
      operationId: createRegistration
      tags: [Auth]
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      description: The user's email address.
                      example: jdoe@gmail.com
                    password:
                      type: string
                      format: password
                      description: The user's password.
                      example: securePassword123
                    producer_profile_attributes:
                      $ref: '#/components/schemas/ProducerProfileAttributes'
                    vet_profile_attributes:
                      $ref: '#/components/schemas/VetProfileAttributes'
                  required:
                    - email
                    - password
              required:
                - user
      responses:
        '200':
          description: Successfully created user account. JWT token included in Authorization header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/certification_requests:
    get:
      summary: Retrieves open certification requests for the authenticated user.
      description: Retrieves a list of open certification requests (created or assigned status) for the authenticated user's profile. Producers see requests they created, veterinarians see requests assigned to them.
      operationId: listCertificationRequests
      tags: [Certification Requests]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved list of open certification requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificationRequest'
        '401':
          description: Unauthorized - user not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a new certification request.
      description: Creates a new certification request with required file upload and automatic veterinarian assignment.
      operationId: createCertificationRequest
      tags: [Certification Requests]
      security:
        - bearerAuth: []
      requestBody:
        description: Certification request data with required file upload.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "certification_request[address]":
                  type: string
                  description: Farm address
                  example: "Farm Address 123"
                "certification_request[locality_id]":
                  type: integer
                  description: Locality identifier
                  example: 1
                "certification_request[intended_animal_group]":
                  type: integer
                  description: Number of animals in the group
                  example: 50
                "certification_request[declared_lot_weight]":
                  type: integer
                  description: Declared weight of the lot in kg
                  minimum: 1
                  maximum: 2000
                  example: 450
                "certification_request[declared_lot_age]":
                  type: integer
                  description: Declared age of the lot in months
                  minimum: 1
                  maximum: 240
                  example: 24
                "certification_request[cattle_breed]":
                  type: string
                  enum: [angus, hereford, brahman, charolais, limousin, simmental, holstein, jersey, shorthorn, other]
                  description: Cattle breed
                  example: "angus"
                "certification_request[preferred_time_range_start]":
                  type: string
                  format: date-time
                  description: Preferred start time for certification
                  example: "2024-12-02T09:00:00-03:00"
                "certification_request[preferred_time_range_end]":
                  type: string
                  format: date-time
                  description: Preferred end time for certification
                  example: "2024-12-02T17:00:00-03:00"
                "certification_request[file]":
                  type: string
                  format: binary
                  description: Required image file (JPEG/PNG only)
              required:
                - "certification_request[address]"
                - "certification_request[locality_id]"
                - "certification_request[intended_animal_group]"
                - "certification_request[declared_lot_weight]"
                - "certification_request[declared_lot_age]"
                - "certification_request[cattle_breed]"
                - "certification_request[preferred_time_range_start]"
                - "certification_request[preferred_time_range_end]"
                - "certification_request[file]"
      responses:
        '201':
          description: Successfully created certification request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestCreate'
        '401':
          description: Unauthorized - user not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user is not a producer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation errors or veterinarian assignment failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/certification_requests/{id}:
    get:
      summary: Retrieves a specific certification request.
      description: Retrieves a specific certification request by ID. Users can only access certification requests they are associated with (producers can access their own requests, veterinarians can access requests assigned to them).
      operationId: getCertificationRequest
      tags: [Certification Requests]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The certification request ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successfully retrieved certification request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestCreate'
        '401':
          description: Unauthorized - user not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certification request not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/certification_requests/{id}/certify:
    post:
      summary: Certifies a certification request by creating a certified lot with cattle certifications.
      description: Creates a certified lot with multiple cattle certifications for an assigned certification request. Only the assigned veterinarian can certify the request.
      operationId: certifyCertificationRequest
      tags: [Certification Requests]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The certification request ID
          schema:
            type: integer
            example: 1
      requestBody:
        description: Cattle certifications data with photos. Send as many certifications as needed using indexed form fields.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "certifications[0][cuig_code]":
                  type: string
                  description: CUIG code for first certification
                  example: "CUIG123456"
                "certifications[0][alternative_code]":
                  type: string
                  description: Alternative code for first certification
                  example: "ALT789"
                "certifications[0][gender]":
                  type: string
                  enum: [male, female]
                  description: Gender for first certification
                  example: "male"
                "certifications[0][category]":
                  type: string
                  enum: [unweaned_calf, weaned_heifer, weaned_steer]
                  description: Category for first certification
                  example: "unweaned_calf"
                "certifications[0][dental_chronology]":
                  type: string
                  enum: [milk_incisors_first_medians, milk_second_medians, milk_corners, leveling_incisors, leveling_first_medians, leveling_second_medians, leveling_corners, permanent_incisors, permanent_first_medians, permanent_second_medians, permanent_corners, full_dentition]
                  description: Dental chronology for first certification
                "certifications[0][estimated_weight]":
                  type: integer
                  minimum: 1
                  maximum: 1000
                  description: Estimated weight in kg for first certification
                  example: 150
                "certifications[0][pregnant]":
                  type: boolean
                  description: Pregnancy status for first certification
                "certifications[0][pregnancy_diagnosis_method]":
                  type: string
                  enum: [palpation, ultrasound, blood_test]
                  description: Pregnancy diagnosis method for first certification
                "certifications[0][pregnancy_service_range]":
                  type: string
                  description: Pregnancy service date range for first certification
                  example: "2024-01-01..2024-02-01"
                "certifications[0][corporal_condition]":
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Corporal condition score for first certification
                "certifications[0][brucellosis_diagnosis]":
                  type: string
                  description: Brucellosis diagnosis for first certification
                "certifications[0][comments]":
                  type: string
                  description: Comments for first certification
                "certifications[0][data_taken_at]":
                  type: string
                  format: date-time
                  description: When data was taken for first certification
                  example: "2024-12-01T10:00:00-03:00"
                "certifications[0][geolocation_points][lat]":
                  type: number
                  format: float
                  minimum: -90
                  maximum: 90
                  description: Latitude for first certification
                  example: -34.6037
                "certifications[0][geolocation_points][lng]":
                  type: number
                  format: float
                  minimum: -180
                  maximum: 180
                  description: Longitude for first certification
                  example: -58.3816
                "certifications[0][photo]":
                  type: string
                  format: binary
                  description: Photo for first certification (required)
              required:
                - "certifications[0][gender]"
                - "certifications[0][category]"
                - "certifications[0][photo]"
              additionalProperties:
                description: Additional certifications can be sent using the same pattern with incremented indexes (certifications[1][field], certifications[2][field], etc.)
            examples:
              single_certification:
                summary: Single cattle certification
                description: Example with one cattle certification
                value:
                  "certifications[0][cuig_code]": "CUIG123456"
                  "certifications[0][gender]": "male"
                  "certifications[0][category]": "unweaned_calf"
                  "certifications[0][estimated_weight]": 150
                  "certifications[0][data_taken_at]": "2024-12-01T10:00:00-03:00"
                  "certifications[0][photo]": "(binary file)"
              multiple_certifications:
                summary: Multiple cattle certifications
                description: Example with multiple cattle certifications
                value:
                  "certifications[0][cuig_code]": "CUIG123456"
                  "certifications[0][gender]": "male"
                  "certifications[0][category]": "unweaned_calf"
                  "certifications[0][estimated_weight]": 150
                  "certifications[0][data_taken_at]": "2024-12-01T10:00:00-03:00"
                  "certifications[0][photo]": "(binary file)"
                  "certifications[1][cuig_code]": "CUIG789012"
                  "certifications[1][gender]": "female"
                  "certifications[1][category]": "weaned_heifer"
                  "certifications[1][estimated_weight]": 220
                  "certifications[1][data_taken_at]": "2024-12-01T11:00:00-03:00"
                  "certifications[1][photo]": "(binary file)"
      responses:
        '201':
          description: Successfully certified the request and created certified lot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationRequestCreate'
        '401':
          description: Unauthorized - user not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - user is not a veterinarian.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Certification request not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Certification validation errors (request not assigned, too many certifications, etc.).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/viewer:
    get:
      summary: Retrieves the current authenticated user's information.
      description: Retrieves the current authenticated user's information, including profile details.
      operationId: getViewer
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - user not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/localities:
    get:
      summary: Retrieves a list of all localities.
      description: Retrieves a list of all localities ordered by name.
      operationId: listLocalities
      tags: [Localities]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved list of localities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Locality'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: _huella_api_session
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user.
          example: 1
        email:
          type: string
          format: email
          description: The user's email address.
          example: "icesarani@uade.edu.ar"
        producer_profile:
          $ref: '#/components/schemas/ProducerProfile'
          description: Producer profile information (if user is a producer)
        vet_profile:
          $ref: '#/components/schemas/VetProfile'
          description: Vet profile information (if user is a vet)
    ProducerProfile:
      type: object
      properties:
        id:
          type: integer
          description: Profile identifier
          example: 1
        name:
          type: string
          description: Producer name
          example: "Juan Pérez"
        cuig_number:
          type: string
          description: CUIG number
          example: "CUIG123456"
        renspa_number:
          type: string
          description: RENSPA number
          example: "RENSPA12345"
        identity_card:
          type: string
          description: Identity card number
          example: "12345678"
        created_at:
          type: string
          format: date-time
          description: Profile creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Profile last update timestamp
          example: "2024-01-15T10:30:00Z"
    VetProfile:
      type: object
      properties:
        id:
          type: integer
          description: Profile identifier
          example: 1
        first_name:
          type: string
          description: Veterinarian first name
          example: "María"
        last_name:
          type: string
          description: Veterinarian last name
          example: "González"
        full_name:
          type: string
          description: Veterinarian full name
          example: "María González"
        license_number:
          type: string
          description: Veterinarian license number
          example: "LIC123456"
        identity_card:
          type: string
          description: Identity card number
          example: "87654321"
        created_at:
          type: string
          format: date-time
          description: Profile creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Profile last update timestamp
          example: "2024-01-15T10:30:00Z"
        localities:
          type: array
          description: Localities where the vet provides services
          items:
            $ref: '#/components/schemas/Locality'
    ProducerProfileAttributes:
      type: object
      properties:
        name:
          type: string
          description: Producer name
          example: "Juan Pérez"
        cuig_number:
          type: string
          description: CUIG number
          example: "CUIG123456"
        renspa_number:
          type: string
          description: RENSPA number
          example: "RENSPA12345"
        identity_card:
          type: string
          description: Identity card number
          example: "12345678"
      required:
        - name
        - cuig_number
        - renspa_number
        - identity_card
    VetProfileAttributes:
      type: object
      properties:
        first_name:
          type: string
          description: Veterinarian first name
          example: "María"
        last_name:
          type: string
          description: Veterinarian last name
          example: "González"
        license_number:
          type: string
          description: Veterinarian license number
          example: "LIC123456"
        identity_card:
          type: string
          description: Identity card number
          example: "87654321"
        vet_service_areas_attributes:
          type: array
          description: Optional array of service areas for the veterinarian
          items:
            $ref: '#/components/schemas/VetServiceAreaAttributes'
          example:
            - locality_id: 1
            - locality_id: 2
        vet_work_schedule_attributes:
          $ref: '#/components/schemas/VetWorkScheduleAttributes'
          description: Optional work schedule for the veterinarian
      required:
        - first_name
        - last_name
        - license_number
        - identity_card
    VetServiceAreaAttributes:
      type: object
      properties:
        locality_id:
          type: integer
          description: The ID of the locality where the veterinarian provides services
          example: 1
      required:
        - locality_id
    VetWorkScheduleAttributes:
      type: object
      properties:
        monday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Monday
          example: "morning"
          default: "none"
        tuesday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Tuesday
          example: "both"
          default: "none"
        wednesday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Wednesday
          example: "afternoon"
          default: "none"
        thursday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Thursday
          example: "none"
          default: "none"
        friday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Friday
          example: "both"
          default: "none"
        saturday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Saturday
          example: "morning"
          default: "none"
        sunday:
          type: string
          enum: [none, morning, afternoon, both]
          description: Work schedule for Sunday
          example: "none"
          default: "none"
    Locality:
      type: object
      properties:
        id:
          type: integer
          description: Locality identifier
          example: 1
        name:
          type: string
          description: Locality name
          example: "Buenos Aires"
        province_id:
          type: integer
          description: Province identifier
          example: 1
    CertificationRequestInput:
      type: object
      properties:
        address:
          type: string
          description: Farm address
          example: "Farm Address 123"
        locality_id:
          type: integer
          description: Locality identifier
          example: 1
        intended_animal_group:
          type: integer
          description: Number of animals in the group
          example: 50
        declared_lot_weight:
          type: integer
          description: Declared weight of the lot in kg
          minimum: 1
          maximum: 2000
          example: 450
        declared_lot_age:
          type: integer
          description: Declared age of the lot in months
          minimum: 1
          maximum: 240
          example: 24
        cattle_breed:
          type: string
          enum: [angus, hereford, brahman, charolais, limousin, simmental, holstein, jersey, shorthorn, other]
          description: Cattle breed
          example: "angus"
        preferred_time_range_start:
          type: string
          format: date-time
          description: Preferred start time for certification
          example: "2024-12-02T09:00:00-03:00"
        preferred_time_range_end:
          type: string
          format: date-time
          description: Preferred end time for certification
          example: "2024-12-02T17:00:00-03:00"
        file:
          type: string
          format: binary
          description: Required image file (JPEG/PNG only)
      required:
        - address
        - locality_id
        - intended_animal_group
        - declared_lot_weight
        - declared_lot_age
        - cattle_breed
        - preferred_time_range_start
        - preferred_time_range_end
        - file
    CertificationRequestCreate:
      type: object
      properties:
        certification_request:
          $ref: '#/components/schemas/CertificationRequest'
    CertificationRequest:
      type: object
      properties:
        id:
          type: integer
          description: Certification request identifier
          example: 1
        address:
          type: string
          description: Farm address
          example: "Farm Address 123"
        intended_animal_group:
          type: integer
          description: Number of animals in the group
          example: 50
        declared_lot_weight:
          type: integer
          description: Declared weight in kg
          example: 450
        declared_lot_age:
          type: integer
          description: Declared age in months
          example: 24
        cattle_breed:
          type: string
          description: Cattle breed
          example: "angus"
        preferred_time_range:
          type: string
          description: Preferred time range for certification
          example: "[2024-12-02 09:00:00 -0300,2024-12-02 17:00:00 -0300)"
        scheduled_date:
          oneOf:
            - type: 'null'
            - type: string
          format: date
          description: Scheduled date for certification
          example: "2024-12-02"
        scheduled_time:
          oneOf:
            - type: 'null'
            - type: string
              enum: [morning, afternoon]
          description: Scheduled time slot
          example: "morning"
        status:
          type: string
          enum: [created, assigned, executed, canceled, rejected]
          description: Request status
          example: "assigned"
        locality:
          $ref: '#/components/schemas/Locality'
        producer_profile:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Farm Producer Ltd"
            cuig_number:
              type: string
              example: "CUIG123456"
        vet_profile:
          oneOf:
            - type: 'null'
            - type: object
          properties:
            id:
              type: integer
              example: 1
            first_name:
              type: string
              example: "Dr. Maria"
            last_name:
              type: string
              example: "Garcia"
            license_number:
              type: string
              example: "LIC123456"
        file_upload:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/AiAnalyzedFileUpload'
        certified_lot:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/CertifiedLot'
          description: Certified lot information (if request has been certified)
        created_at:
          type: string
          format: date-time
          example: "2024-12-02T09:30:00-03:00"
        updated_at:
          type: string
          format: date-time
          example: "2024-12-02T10:30:00-03:00"
    CertifiedLotResponse:
      type: object
      properties:
        certified_lot:
          $ref: '#/components/schemas/CertifiedLot'
    CertifiedLot:
      type: object
      properties:
        id:
          type: integer
          description: Certified lot identifier
          example: 1
        created_at:
          type: string
          format: date-time
          description: When the lot was created
          example: "2024-12-02T10:30:00-03:00"
        updated_at:
          type: string
          format: date-time
          description: When the lot was last updated
          example: "2024-12-02T10:30:00-03:00"
        certification_request:
          type: object
          description: Associated certification request basic info
          properties:
            id:
              type: integer
              example: 1
            address:
              type: string
              example: "Farm Address 123"
            intended_animal_group:
              type: integer
              example: 50
            declared_lot_weight:
              type: integer
              example: 450
            declared_lot_age:
              type: integer
              example: 24
            cattle_breed:
              type: string
              example: "angus"
            status:
              type: string
              example: "assigned"
        cattle_certifications:
          type: array
          description: Array of cattle certifications in this lot
          items:
            $ref: '#/components/schemas/CattleCertification'
    CattleCertification:
      type: object
      properties:
        id:
          type: integer
          description: Cattle certification identifier
          example: 1
        cuig_code:
          type: string
          description: CUIG code
          example: "CUIG123456"
        alternative_code:
          type: string
          description: Alternative code
          example: "ALT789"
        gender:
          type: string
          enum: [male, female]
          description: Gender of the cattle
          example: "male"
        category:
          type: string
          enum: [unweaned_calf, weaned_heifer, weaned_steer]
          description: Category of the cattle
          example: "unweaned_calf"
        dental_chronology:
          type: string
          enum: [milk_incisors_first_medians, milk_second_medians, milk_corners, leveling_incisors, leveling_first_medians, leveling_second_medians, leveling_corners, permanent_incisors, permanent_first_medians, permanent_second_medians, permanent_corners, full_dentition]
          description: Dental chronology
          example: "milk_incisors_first_medians"
        estimated_weight:
          type: integer
          description: Estimated weight in kg
          example: 150
        pregnant:
          type: boolean
          description: Whether the cattle is pregnant
          example: false
        pregnancy_diagnosis_method:
          type: string
          enum: [palpation, ultrasound, blood_test]
          description: Pregnancy diagnosis method
          example: "palpation"
        pregnancy_service_range:
          type: string
          description: Pregnancy service date range
          example: "2024-01-01T00:00:00-03:00..2024-02-01T00:00:00-03:00"
        corporal_condition:
          type: integer
          description: Corporal condition score
          example: 3
        brucellosis_diagnosis:
          type: string
          description: Brucellosis diagnosis
          example: "Negative"
        comments:
          type: string
          description: Additional comments
          example: "Healthy cattle"
        geolocation_points:
          type: object
          description: GPS coordinates
          properties:
            lat:
              type: number
              format: float
              example: -34.6037
            lng:
              type: number
              format: float
              example: -58.3816
        data_taken_at:
          type: string
          format: date-time
          description: When the data was taken
          example: "2024-12-01T10:00:00-03:00"
        photo_url:
          type: string
          format: uri
          description: URL to the cattle photo
          example: "https://example.com/rails/active_storage/blobs/xyz123/cattle_photo.jpg"
        blockchain_certification:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/BlockchainCertification'
          description: Blockchain certification information (if available)
        created_at:
          type: string
          format: date-time
          description: When the certification was created
          example: "2024-12-02T10:30:00-03:00"
        updated_at:
          type: string
          format: date-time
          description: When the certification was last updated
          example: "2024-12-02T10:30:00-03:00"
    CattleCertificationInput:
      type: object
      description: Input schema for cattle certification in multipart/form-data
      properties:
        cuig_code:
          type: string
          description: CUIG code for the cattle
          example: "CUIG123456"
        alternative_code:
          type: string
          description: Alternative code for the cattle
          example: "ALT789"
        gender:
          type: string
          enum: [male, female]
          description: Gender of the cattle
          example: "male"
        category:
          type: string
          enum: [unweaned_calf, weaned_heifer, weaned_steer]
          description: Category of the cattle
          example: "unweaned_calf"
        dental_chronology:
          type: string
          enum: [milk_incisors_first_medians, milk_second_medians, milk_corners, leveling_incisors, leveling_first_medians, leveling_second_medians, leveling_corners, permanent_incisors, permanent_first_medians, permanent_second_medians, permanent_corners, full_dentition]
          description: Dental chronology of the cattle
          example: "milk_incisors_first_medians"
        estimated_weight:
          type: integer
          description: Estimated weight in kg
          minimum: 1
          maximum: 1000
          example: 150
        pregnant:
          type: boolean
          description: Whether the cattle is pregnant
          example: false
        pregnancy_diagnosis_method:
          type: string
          enum: [palpation, ultrasound, blood_test]
          description: Method used for pregnancy diagnosis
          example: "palpation"
        pregnancy_service_range:
          type: string
          description: Pregnancy service date range (format depends on backend)
          example: "2024-01-01..2024-02-01"
        corporal_condition:
          type: integer
          minimum: 1
          maximum: 5
          description: Corporal condition score (1-5 scale)
          example: 3
        brucellosis_diagnosis:
          type: string
          description: Brucellosis diagnosis result
          example: "Negative"
        comments:
          type: string
          description: Additional comments about the cattle
          example: "Healthy cattle"
        data_taken_at:
          type: string
          format: date-time
          description: When the data was taken (cannot be in the future)
          example: "2024-12-01T10:00:00-03:00"
        geolocation_points:
          type: object
          description: GPS coordinates where data was taken
          properties:
            lat:
              type: number
              format: float
              description: Latitude coordinate
              minimum: -90
              maximum: 90
              example: -34.6037
            lng:
              type: number
              format: float
              description: Longitude coordinate
              minimum: -180
              maximum: 180
              example: -58.3816
        photo:
          type: string
          format: binary
          description: Required photo of the cattle (JPEG/PNG)
      required:
        - photo
        - gender
        - category
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Validation failed"
        code:
          type: string
          description: Error code
          example: "unprocessable_entity"
    AiAnalyzedFileUpload:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ai_analyzed_age:
          type: string
          example: "2.3 years"
        ai_analyzed_weight:
          type: string
          example: "485 kg"
        ai_analyzed_breed:
          type: string
          example: "Angus"
        processed_at:
          type: string
          format: date-time
          example: "2024-12-02T10:30:00-03:00"
    BlockchainCertification:
      type: object
      description: Blockchain certification information
      properties:
        pdf_hash:
          type: string
          description: SHA256 hash of the PDF certificate
          example: "0x1234567890abcdef..."
        transaction_hash:
          type: string
          description: Blockchain transaction hash
          example: "0xabcdef1234567890..."
        blockchain_status:
          type: string
          enum: [pending, confirmed, failed, not_certified]
          description: Status of the blockchain transaction
          example: "confirmed"
        blockchain_url:
          type: string
          format: uri
          description: URL to view transaction on blockchain explorer
          example: "https://amoy.polygonscan.com/tx/0xabcdef..."
        pdf_filename:
          type: string
          description: Generated PDF filename
          example: "cert_CUIG123_20240308_PROD456.pdf"
        pdf_available:
          type: boolean
          description: Whether the PDF file is available for download
          example: true
        blockchain_certified:
          type: boolean
          description: Whether the document is confirmed on blockchain
          example: true
        certified_at:
          type: string
          format: date-time
          description: When the blockchain certification was created
          example: "2024-12-02T10:30:00-03:00"
        network_name:
          type: string
          description: Blockchain network name
          example: "Polygon Amoy Testnet"
