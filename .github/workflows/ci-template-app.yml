name: Test CI-template-app

on:
  push:
    branches:
      - main
      - feature/**
      - fix/**
  pull_request:
    branches:
      - main
      - feature/**
      - fix/**

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.1' # CHANGE_RUBY_VERSION_HERE

      - name: Cache Ruby gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install --path vendor/bundle

      - name: Run RuboCop
        run: bundle exec rubocop

  test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      RAILS_ENV: test
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.1' # CHANGE_RUBY_VERSION_HERE

      - name: Cache Ruby gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install --path vendor/bundle

      - name: Wait for PostgreSQL to be ready
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            sleep 1
          done

      - name: Create and migrate DB
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Run RSpec
        run: bundle exec rspec